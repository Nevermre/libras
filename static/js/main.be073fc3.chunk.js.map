{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","className","href","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0JAwEeA,MAjEf,WACE,OACE,6BACI,yBAAKC,UAAU,aAEb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,2BAAf,0CAGA,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAb,uQACA,uBAAGA,UAAU,aAAb,qCAEV,uBAAGA,UAAU,aAAb,iDAEA,uBAAGA,UAAU,aAAb,2DAGU,uBAAGC,KAAK,+BAA+BC,MAAM,mBAA7C,8BAKV,6BAAS,6BACT,yBAAKF,UAAU,aAEf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,2BAAf,aAGA,yBAAKA,UAAU,aAEb,uBAAGA,UAAU,aAAb,6YAEA,yBAAKA,UAAU,OACf,uBAAGC,KAAK,gEAAgED,UAAU,mBAAlF,6BAEA,uBAAGC,KAAK,yEAAyED,UAAU,mBAA3F,6BAGQ,6BAAS,6BAErB,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,2BAAf,mBAGA,yBAAKA,UAAU,aAEb,uBAAGA,UAAU,aAAb,iVAEA,yBAAKA,UAAU,OACf,uBAAGC,KAAK,8EAA8ED,UAAU,mBAAhG,6BAEA,uBAAGC,KAAK,+CAA+CD,UAAU,mBAAjE,6BAGQ,+BCtDIG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,qDEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.be073fc3.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle, Button\n} from 'reactstrap';\n\nfunction App() {\n  return (\n    <div>\n        <div className=\"container\" >\n\n          <div className=\"card\">\n            <div className=\"card-header text-center\">\n              CELIB - Curso de Extensão em Libras\n            </div>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">O que é?</h5>\n              <p className=\"card-text\">O Curso de Extensão em Língua Brasileira de Sinais (CELIB) oferece cursos de LIBRAS, em vários níveis, a preços reduzidos aos estudantes e servidores da Universidade Federal de Viçosa (UFV) e também aos moradores de Viçosa e região.</p>\n              <p className=\"card-text\">\n    Universidade Federal de Viçosa</p>\n    <p className=\"card-text\">\n    Vila Giannetti, Casa 12, Sala 3, Viçosa-MG</p>\n    <p className=\"card-text\">\n    Telefone: (31) 3612-3006 | E-mail: celib.ufv@gmail.com </p>\n              \n              <a href=\"https://celib.prelin.org.br/\" class=\"btn btn-primary\">Ir para o site do CELIB</a>\n            </div>\n          </div>\n          \n        </div>\n    <br></br><br></br>\n    <div className=\"container\" >\n\n    <div className=\"card\">\n      <div className=\"card-header text-center\">\n      Hand Talk\n      </div>\n      <div className=\"card-body\">\n        \n        <p className=\"card-text\">Considerado um dos melhores aplicativos para o aprendizado de LIBRAS, o Hand Talk faz uma tradução automática de texto e voz para a linguagem de sinais. O app é bastante interativo e conta com a ajuda de um intérprete 3D, que também comanda a apresentação de vídeos que ensinam expressões e sinais em LIBRAS. Tanto adultos quanto crianças podem usar este app. </p>\n        \n        <div className=\"row\">\n        <a href=\"https://play.google.com/store/apps/details?id=br.com.handtalk\" className=\"btn btn-primary\">Baixar Aplicativo Android</a>\n        \n        <a href=\"https://apps.apple.com/br/app/hand-talk-tradutor-portugues/id659816995\" className=\"btn btn-success\">Baixar Aplicativo IOS</a>\n        </div>\n      </div>\n    </div></div><br></br><br></br>\n\n    <div className=\"container\" >\n\n    <div className=\"card\">\n      <div className=\"card-header text-center\">\n      Alfabeto Libras\n      </div>\n      <div className=\"card-body\">\n        \n        <p className=\"card-text\">Um aplicativo ideal para iniciantes na Língua Brasileira de Sinais, o Alfabeto Libras foi desenvolvido pelo Projeto Beethoven com a proposta de aproximar pessoas. O app utiliza jogos para tornar o aprendizado do alfabeto de LIBRAS mais interativo e ainda conta com uma versão especial para crianças, o Alfabeto Libras Kids. </p>\n        \n        <div className=\"row\">\n        <a href=\"https://play.google.com/store/apps/details?id=br.com.joao.primeira&hl=pt_BR\" className=\"btn btn-primary\">Baixar Aplicativo Android</a>\n        \n        <a href=\"https://itunes.apple.com/us/app/id1195602484\" className=\"btn btn-success\">Baixar Aplicativo IOS</a>\n        </div>\n      </div>\n    </div></div><br></br>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}